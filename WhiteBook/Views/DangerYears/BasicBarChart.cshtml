@model IEnumerable<WhiteBook.Models.Danger>

@{
    ViewBag.Title = "Bar Chart";    
}

<style type="text/css">    
     
    .axis path, .axis line {
         fill: none;
         stroke: #333;
     }

    .axis .grid-line {
        stroke: #000;
        stroke-opacity: 0.2;
    }

    .axis text {
        font: 10px Arial;
    }
</style>

<p class="h3">Угрозы</p>

<div class="row">
    <div class="col-md-4">        
        <div class="list-group">
            @foreach (var item in Model)
            {
            <a href="#" id="@item.Id" class="list-group-item list-group-item-action danger">@item.Descr <span>@item.Variable</span></a>
            }

        </div>
    </div>    

    <div class="col-md-8">
        <div id="chartContainer">
            
        </div>
    </div>    
</div>

@section scripts {

    <script type="text/javascript">
        $(document).ready(function() {

            $.getJSON("/api/DangerYears",
                function (data) {
                    buildAxis(data);
                });

            $('.list-group a').on('click',
                function(e) {
                    e.preventDefault();

                    if ($(this).hasClass("active")) {
                        removeData(this.id);
                    } else {
                        appendData(this.id);
                    }

                    $(this).toggleClass('active');
                });            
        });

        var height = 500,
            width = 900,
            margin = 30;

        var svg = d3.select("#chartContainer").append("svg")
            .attr("class", "axis")
            .attr("width", width)
            .attr("height", height);

        // длина оси X= ширина контейнера svg - отступ слева и справа
        var xAxisLength = width - 2 * margin;

        // длина оси Y = высота контейнера svg - отступ сверху и снизу
        var yAxisLength = height - 2 * margin;

        globaldata = [];

        function buildAxis(dataSet) {

            globaldata = dataSet;

            // функция интерполяции значений на ось Х
            scaleX = d3.time.scale()
                .domain([
                    d3.min(dataSet, function(d) { return new Date(d.dangerDate); }),
                    d3.max(dataSet, function(d) { return new Date(d.dangerDate); })
                ])
                .range([0, xAxisLength]);

            // находим максимальное значение для оси Y
            var maxValue = d3.max(dataSet, function(d) { return d.amount; });

            // находим минимальное значение для оси Y
            var minValue = d3.min(dataSet, function(d) { return d.amount; });

            // функция интерполяции значений на ось Y
            scaleY = d3.scale.linear()
                .domain([maxValue, minValue])
                .range([0, yAxisLength]);

            // создаем ось X
            var xAxis = d3.svg.axis()
                .scale(scaleX)
                .orient("bottom")
                .tickFormat(d3.time.format('%Y'));

            // создаем ось Y
            var yAxis = d3.svg.axis()
                .scale(scaleY)
                .orient("left");

            // отрисовка оси Х
            svg.append("g")
                .attr("class", "x-axis")
                .attr("transform", // сдвиг оси вниз и вправо
                    "translate(" + margin + "," + (height - margin) + ")")
                .call(xAxis);

            // отрисовка оси Y
            svg.append("g")
                .attr("class", "y-axis")
                .attr("transform", // сдвиг оси вниз и вправо на margin
                    "translate(" + margin + "," + margin + ")")
                .call(yAxis);

            // создаем набор вертикальных линий для сетки
            d3.selectAll("g.x-axis g.tick")
                .append("line") // добавляем линию
                .classed("grid-line", true) // добавляем класс
                .attr("x1", 0)
                .attr("y1", 0)
                .attr("x2", 0)
                .attr("y2", - (height - 2 * margin));

            // рисуем горизонтальные линии
            d3.selectAll("g.y-axis g.tick")
                .append("line")
                .classed("grid-line", true)
                .attr("x1", 0)
                .attr("y1", 0)
                .attr("x2", xAxisLength)
                .attr("y2", 0);

        };

        // общая функция для создания графиков
        function createChart(data, colorStroke, id) {
            // функция, создающая по массиву точек линии
            var line = d3.svg.line()
                .x(function(d) { return scaleX(new Date(d.dangerDate)) + margin; })
                .y(function(d) { return scaleY(d.amount) + margin; });

            var g = svg.append("g").attr("id", 'id'+id);

            g.append("path")
                .attr("d", line(data))
                .style("stroke", colorStroke)
                .style("stroke-width", 2);

            // добавляем отметки к точкам
            var label = 'id' + id;
            g.selectAll(".dot " + label)
                .data(data)
                .enter().append("circle")
                .style("stroke", colorStroke)
                .style("fill", "white")
                .attr("class", "dot " + label)
                .attr("r", 3.5)
                .attr("cx", function(d) { return scaleX(new Date(d.dangerDate)) + margin; })
                .attr("cy", function(d) { return scaleY(d.amount) + margin; });

        };

        function appendData(id) {
            var color = d3.scale.category10();

            var newDataChart = globaldata.filter(c => c.dangerId == id);

            createChart(newDataChart, color(0), id);

            //var activelements = $(".danger.active");
            //for (var i = 0; i < activelements.length; i++) {
            //    var newDataChart = globaldata.filter(c => c.dangerId == activelements[i].id);

            //    createChart(newDataChart, color(i), activelements[i].id);
            //}
        }

        function removeData(id) {
            svg.select("g#id"+id).remove();
        }

    </script>

}